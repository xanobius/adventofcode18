<?php

namespace App\TwoEighteen;

use App\DayClass;
use App\TwoEighteen\Classes\Cart;
use App\TwoEighteen\Classes\Rail;

class Thirdteenth extends DayClass
{

//    protected $filepath = '2018/day_13.example.txt';
//    protected $filepath = '2018/day_13_2.example.txt';
    protected $filepath = '2018/day_13.txt';

    protected $rails;
    protected $carts;

    public function primary()
    {
        ini_set('memory_limit', '1G');
        set_time_limit(240);

        $start = microtime(true);
        $this->parseRailway();


//        $this->carts->each(function(Cart $c){
//            $c->getField()->setOccupied(false);
//        });
//
//        $this->runSingleCart($this->carts[8], 4162 );
//        return;

//        print $this->carts->map(function (Cart $cart) {
//            return $cart->getField()->getX() . '/' . $cart->getField()->getY();
//        })->implode(' - ');
//        print chr(10);


//        while ($this->carts->groupBy(function (Cart $cart) {
////                return $cart->getField()->getX() . '-' . $cart->getField()->getY();
////            })->count() == $carCount) {
////        while($crashField == false){
///

        $counter = 0;
        while($this->carts->count() > 1){
//        for($i = 0; $i < 10000; $i++){
            $this->carts = $this->carts
                ->sort(function(Cart $ca, Cart $cb){
                    return $ca->getField()->getY() == $cb->getField()->getY() ?
                        $ca->getField()->getX() - $cb->getField()->getX() :
                        $ca->getField()->getY() - $cb->getField()->getY();
                });

            $delete_list = [];
            $this->carts->each(function (Cart $c, $index) use (&$delete_list){
                    $crashField = $c->move();
                    if($crashField !== false){
                        $delete_list[] = $crashField;
                        print "Crash on field " . $crashField->getX() . '/' . $crashField->getY() . chr(10);
                    }
                });

            if(count($delete_list)){
                print "Collision found after " . $counter . " ticks. Remove Items" . chr(10);

                $this->carts->forget(array_keys($this->carts->filter(function(Cart $cart) use ($delete_list) {
                    foreach($delete_list as $cord){
                        if($cart->getField()->getX() == $cord->getX() && $cart->getField()->getY() == $cord->getY()){
                            return true;
                        }
                    }
                    return false;
                })->toArray()));

                foreach($delete_list as $field){
                    $field->setCrash(false);
                    $field->setOccupied(false);

//                    dd($this->rails->filter(function($r){ return $r->isOccupied() || $r->isCrash(); }));
                }

                print "Remaining carts: " . $this->carts->count() . chr(10);

                if($this->carts->count() == 1){
                    // Wrong: 111,111
                    // Wrong: 111, 99
                    // Wrong: 111,100
                    // Wrong: 112,99

//                    $this->carts->first()->move();
//                    $this->carts->first()->move();


                    print "Only one card remaining after " . $counter . " , on field: " .
                        $this->carts->first()->getField()->getX() . '/' .
                        $this->carts->first()->getField()->getY() . chr(10);
                }

            }
            $counter++;
        }

        print chr(10);
        print "Collision after " . $counter . " rounds";
        print chr(10);
//        print "Crash on field: " . $crashField->getX() . '/'  . $crashField->getY();

        return [
            'time elapsed : ' . (microtime(true) - $start)
        ];
    }

    public function secondary()
    {
        parent::secondary(); // TODO: Change the autogenerated stub
    }

    private function parseRailway()
    {
        $inputs = $this->getInput();

//        dd($inputs);

        $this->rails = collect();
        $this->carts = collect();

        $sings = ['^', '<', 'v', '>'];

        $prev = null;
        $prevRow = null;
        $currentRow = null;

        /*
         * Optimizing Idea
         * Cache the previous row:
         *  Only top elements have to be searched and those
         *  are ALWAYS in the previous line.
         *  So PHP would have to crawl the hole rail-net
         *
         * Result:
         *  From 190 secs to under 0.3 secs. Profit!
         */


        for ($y = 0; $y < count($inputs); $y++) {
            $currentRow = [];
            for ($x = 0; $x < strlen($inputs[$y]); $x++) {
                switch ($inputs[$y][$x]) {
                    case '/':
                        // top start?
                        if ($prev != null) {
                            $r = new Rail($x, $y);
                            $r->setWest($prev, true);
                            $r->setNorth($prevRow[$x], true
                            );
                            $prev = null;
                        } else {
                            $r = new Rail($x, $y);
                            $prev = $r;
                        }
                        $this->rails->push($r);
                        $currentRow[$x] = $r;
                        break;
                    case '\\':
                        // bottom start?
                        if ($prev == null) {
                            $r = new Rail($x, $y);
                            $r->setNorth($prevRow[$x], true
                            );
                            $prev = $r;
                        } else {
                            $r = new Rail($x, $y);
                            $r->setWest($prev, true);
                            $prev = null;
                        }
                        $this->rails->push($r);
                        $currentRow[$x] = $r;
                        break;
                    case '-':
                    case '<':
                    case '>':
                        $r = new Rail($x, $y);
                        $r->setWest($prev, true);
                        $prev = $r;
                        $this->rails->push($r);
                        $currentRow[$x] = $r;
                        break;
                    case '|':
                    case '^':
                    case 'v' :
                        $r = new Rail($x, $y);

                        $r->setNorth($prevRow[$x], true
                        );
                        $this->rails->push($r);
                        $currentRow[$x] = $r;
                        break;
                    case '+':
                        $r = new Rail($x, $y);
                        $r->setWest($prev, true);
                        $r->setNorth($prevRow[$x], true
                        );
                        $prev = $r;
                        $this->rails->push($r);
                        $currentRow[$x] = $r;
                        break;
                    case '':
                    default:
                }


                if (in_array($inputs[$y][$x], $sings)) {
                    $c = new Cart($r, array_search($inputs[$y][$x], $sings));
                    $this->carts->push($c);
                }
            }
//            dd($this->rails->last());
            $prevRow = $currentRow;
            unset($currentRow);
        }

    }


    /**
     * @param $testRounds
     */
    private function doTestRounds($testRounds, $carCount): void
    {
        for ($i = 0; $i < $testRounds; $i++) {

            $this->carts->each(function (Cart $c) {
                $c->move();
            });
            print $this->carts->map(function (Cart $cart) {
                return $cart->getField()->getX() . '/' . $cart->getField()->getY();
            })->implode(' - ');


            print chr(10);

            if( $this->carts->groupBy(function (Cart $cart) {
                    return $cart->getField()->getX() . '-' . $cart->getField()->getY();
                })->count() != $carCount) {
                print "Collision happened";
                print chr(10);
            }

        }
    }

    private function runSingleCart(Cart $myCar, $steps): void
    {
        for ($i = 0; $i < $steps; $i++) {
            $myCar->move();
            print $myCar->getField()->getX() . '/' . $myCar->getField()->getY();
            print chr(10);
        }
    }


}